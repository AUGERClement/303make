#!/bin/python3

from os import sys #To read stdin
from matrix import matrix
import copy

def print_usage(): # -h
    print("USAGE\n\t./302separation name1 name 2")
    print("DESCRIPTION\n\ttry again")

def parser():
    name1 = ""
    name2 = ""
    power = 1
    state_name = False
    if (len(sys.argv) == 2 and sys.argv[1] == "-h"):
        print_usage()
        quit (0)
    elif (len(sys.argv) == 3 and sys.argv[2].isnumeric()):
        power = int(sys.argv[2])
    elif (len(sys.argv) == 4):
        name1 = sys.argv[2]
        name2 = sys.argv[3]
        state_name = True
        power = 10
    else :
        print_usage()
        quit (84) #exit
    try:
        with (open(sys.argv[1])) as file:
            data = file.read().rstrip().split('\n')
    except:
        quit (84)
    return data, name1, name2, power, state_name

def print_branch_name(name1, name2, data):
    print("Degree of separation between", name1, "and", name2 + ": ", end='')
    if ((not name1 in data.names) or (not name2 in data.names)):
        print("-1")
    elif (name1 == name2):
        print("0")
    else :
        print(data.matrix[data.names.index(name1)][data.names.index(name2)])

data, name1, name2, power, state_name = parser()
data.sort()
data = [element.split(' is friends with ') for element in data]
copy_data = list(data)

names = []
for element in copy_data:
    if not element[0] in names:
        names.append(element[0])
    if not element[1] in names:
        names.append(element[1])

names.sort()
if (state_name == False):
    [print(name) for name in names]
    print()

tab = matrix(len(names), len(names), data, names)
tab.fill_list()
if (state_name == False):
    tab.print_matrix()
    print()
i = 1
j = 0
cpy = copy.deepcopy(tab)

while i != power:
    result = tab.multiply_matrix(cpy)
    tab.replace(result, i + 1)
    cpy = result
    i += 1
#Fill the diag with 0, as nobydy can befriend himself.
while j != tab.size_x:
    tab.matrix[j][j] = 0
    j += 1
if (state_name == False):
    tab.print_matrix()
else:
    print_branch_name(name1, name2, tab)
